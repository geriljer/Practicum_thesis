stages:
  - build
  - test
  - release   

variables:    #set variabled for pipeline
  VERSION: 1-0-${CI_PIPELINE_ID}   ##set_version_per_pipelineID
  GOPATH: ${CI_PROJECT_DIR}/go
  GO111MODULE: "on"

cache:
  paths:
    - ${CI_PROJECT_DIR}/go/pkg/mod

build-artifacts:
  stage: build
  image: golang:1.19
  script:
    - apt-get update && apt-get install -y gcc musl-dev
    - mkdir -p /app
    - cd backend
    - go mod download
    - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o /app/momo-store ./cmd/api
    - cd /app
    - tar -czvf momo-backend-artifacts.tar.gz -C /app momo-store
    - mv momo-backend-artifacts.tar.gz /builds/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/
  artifacts:
    paths:
      - momo-backend-artifacts.tar.gz
      - ${CI_PROJECT_DIR}/go/pkg/mod

build-backend-code-job:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
  script:
    - /kaniko/executor --context "${CI_PROJECT_DIR}/backend" --dockerfile "${CI_PROJECT_DIR}/backend/dockerfile" --destination "${CI_REGISTRY_IMAGE}/momo-backend:$CI_COMMIT_SHA" --build-arg VERSION=$VERSION --cache=true
    
spotbugs-sast:
  stage: test
  needs:
    - build-backend-code-job
  trigger:
    include:
      - template: Security/SAST.gitlab-ci.yml
  variables:
    SAST_GO_ENABLED: "true"
    GOLANGCI_LINT_VERSION: "1.49.0"

test-backend:
  stage: test
  image: golang:1.19
  script:
    - mkdir -p ${GOPATH}/src/${CI_PROJECT_NAMESPACE}
    - ln -s ${CI_PROJECT_DIR} ${GOPATH}/src/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}
    - cd ${GOPATH}/src/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/backend
    - go mod download
    - go test -v ./...

sonar-backend-sast:
  stage: test
  only:
    changes:
      - backend/**/*
  image: golang:1.19
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar" # Определяет местоположение кэша задания анализа
    GIT_DEPTH: "0"  # Указывает git получить все ветки проекта, необходимо для задачи анализа
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  before_script:
    - apt-get update
    - apt-get install -y wget gnupg unzip
    - wget -qO - https://packages.adoptium.net/artifactory/api/gpg/key/public | gpg --dearmor -o /usr/share/keyrings/adoptium.gpg
    - echo "deb [signed-by=/usr/share/keyrings/adoptium.gpg] https://packages.adoptium.net/artifactory/deb buster main" | tee /etc/apt/sources.list.d/adoptium.list
    - apt-get update
    - apt-get install -y temurin-11-jdk
    - curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
    - unzip sonar-scanner.zip
    - export PATH=$PATH:$(pwd)/sonar-scanner-4.6.2.2472-linux/bin
  script:
    - echo SONARQUBE_URL="$SONARQUBE_URL"
    - echo SONAR_PROJECT_KEY_BACK="$SONAR_PROJECT_KEY_BACK"
    - echo SONAR_LOGIN="$SONAR_LOGIN"
    - echo SONAR_PROJECT_NAME="$SONAR_PROJECT_NAME"
    - cd backend/
    - sonar-scanner -Dsonar.projectKey="$SONAR_PROJECT_KEY_BACK" -Dsonar.sources=. -Dsonar.host.url="$SONARQUBE_URL" -Dsonar.login="$SONAR_LOGIN" -Dsonar.projectName="$SONAR_PROJECT_NAME" -Dsonar.tests=./ -Dsonar.test.inclusions="**/*_test.go" -Dsonar.go.coverage.reportPaths=coverage.out -Dsonar.qualitygate.wait=true
  needs:
    - build-backend-code-job

upload-backend:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  cache: [ ]
  stage: release
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/momo-backend:$CI_COMMIT_SHA $VERSION

upload-to-nexus:
  stage: release
  image: curlimages/curl:7.76.1
  script:
    - curl -v -u "$NEXUS_REPO_USER:$NEXUS_REPO_PASS" --upload-file momo-backend-artifacts.tar.gz "${NEXUS_REPO_NAME}/${VERSION}/backend-artifacts-$VERSION.tar.gz"
  dependencies:
    - build-artifacts
  only:
    - main

